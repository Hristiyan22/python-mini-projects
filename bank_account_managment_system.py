# Bank Account Management System

# üè¶ Data Structures to Store Information
account_holders = []  # Account names
balances = []  # Account balances
transaction_histories = []  # Account transaction logs
loans = []  # Account loan details
loan_history = [] # Account loan logs


MAX_LOAN_AMOUNT = 10000
INTEREST_RATE = 0.03


def display_menu():
    """Main menu for banking system."""
    print("\nüåü Welcome to Enhanced Bank System üåü")
    print("1Ô∏è‚É£ Create Account")
    print("2Ô∏è‚É£ Deposit Money")
    print("3Ô∏è‚É£ Withdraw Money")
    print("4Ô∏è‚É£ Check Balance")
    print("5Ô∏è‚É£ List All Accounts")
    print("6Ô∏è‚É£ Transfer Funds")
    print("7Ô∏è‚É£ View Transaction History")
    print("8Ô∏è‚É£ Apply for Loan")
    print("9Ô∏è‚É£ Repay Loan")
    print("üîü Check Loan Status")
    print("1Ô∏è1Ô∏è View Loan History")
    print("1Ô∏è2Ô∏è Identify Credit Card Type")
    print("0Ô∏è‚É£ Exit")


def create_account():
    """Create a new account."""
    account_name = input("Enter the account holder's name: ")
    account_holders.append(account_name)
    balances.append(0)
    transaction_histories.append([])
    loans.append(0)

    return f"Account for {account_name} was created successfully with a balance of $0.00 and 0 loans"


def deposit():
    """Deposit money into an account."""
    account_name = input("Enter the account holder's name: ")

    if account_name in account_holders:
        index = account_holders.index(account_name)
        try:
            amount = float(input("Enter amount to deposit: "))
            if amount <= 0:
                print("‚ùå Deposit amount must be greater than zero.")
                return

            balances[index] += amount
            transaction_histories[index].append(f"Deposited ${amount:.2f}")
            print(f"‚úÖ${amount:.2f} was deposited successfully. New balance: ${balances[index]:.2f}")
        except ValueError:
            print("‚ùå Invalid amount! Please enter a valid number.")
    else:
        print("‚ùå Account not found.")


def withdraw():
    """Withdraw money from an account."""
    account_name = input("Enter the account holder's name: ")

    if account_name in account_holders:
        index = account_holders.index(account_name)
        try:
            amount = float(input("Enter amount to withdraw: "))
            if amount <= 0:
                print("‚ùå Deposit amount must be greater than zero.")
                return

            balances[index] -= amount
            transaction_histories[index].append(f"Withdrawn ${amount:.2f}")
            print(f"‚úÖ${amount:.2f} was withdrawn successfully. New balance: ${balances[index]:.2f}")
        except ValueError:
            print("‚ùå Invalid amount! Please enter a valid number.")
    else:
        print("‚ùå Account not found.")


def check_balance():
    """Check balance of an account."""
    account_name = input("Enter the account holder's name: ") #Ima error

    if account_name in account_holders:
        index = account_holders.index(account_name)
        print(f"{account_name}'s account balance is: ${balances[index]:.2f}")
    else:
        print("‚ùå Account not found.")


def list_accounts():
    """List all account holders and details."""
    if not account_holders:
        print("There aren't any registered accounts at the moment!")
    else:
        print(account_holders)


def transfer_funds():
    """Transfer funds between two accounts."""
    account_name = input("Enter the account holder's name: ")
    if account_name in account_holders:
        index1 = account_holders.index(account_name)
        recipient_account_name = input("Enter the recipient's account name: ")
        if recipient_account_name in account_holders:
            index2 = account_holders.index(recipient_account_name)
            try:
                amount = float(input("Enter the amount of transfer: "))
                if amount <= 0:
                    print("‚ùå Deposit amount must be greater than zero.")
                    return

                balances[index1] -= amount
                transaction_histories[index1].append(f"Transferred ${amount:.2f}")
                print(f"‚úÖ${amount:.2f} was transferred successfully to {recipient_account_name}. New balance: ${balances[index1]:.2f}")

                balances[index2] += amount
                transaction_histories[index2].append(f"Received ${amount:.2f}")
            except ValueError:
                print("‚ùå Invalid amount! Please enter a valid number.")
        else:
            print("‚ùå Account not found.")
    else:
        print("‚ùå Account not found.")


def view_transaction_history():
    """View transactions for an account."""
    account_name = input("Enter the account holder's name: ")

    if account_name in account_holders:
        index = account_holders.index(account_name)
        print(transaction_histories[index])
    else:
        print("‚ùå Account not found.")


def apply_for_loan():
    """Allow user to apply for a loan."""
    account_name = input("Enter the account holder's name: ")

    if account_name in account_holders:
        index = account_holders.index(account_name)
        try:
            amount_of_loan = float(input("Enter amount of loan you want: "))

            if 0 < amount_of_loan <= MAX_LOAN_AMOUNT:
                months_to_repay_the_loan = int(
                    input("Enter the repayment period in months(24 months is the maximum period): "))

                if months_to_repay_the_loan <= 24:
                    total_amount_to_repay = amount_of_loan * (1 + INTEREST_RATE)
                    monthly_installment = total_amount_to_repay / months_to_repay_the_loan

                    loans[index] = total_amount_to_repay

                    while len(loan_history) <= index:
                        loan_history.append([])

                    loan_history[index].append(f"Loaned ${amount_of_loan:.2f}")

                    print(f"‚úÖ The loan of ${amount_of_loan:.2f} was approved successfully!")
                    print(f"The total amount you will need to repay for the loan is: ${total_amount_to_repay:.2f}")
                    print(f"The minimum monthly installment is: ${monthly_installment:.2f}")
                else:
                    print("‚ùå The repayment period should be 24 months or less.")
            else:
                print(f"‚ùå The loan amount must be greater than 0 and no more than ${MAX_LOAN_AMOUNT}.")
        except ValueError:
            print("‚ùå Invalid amount! Please enter a valid number.")
    else:
        print("‚ùå Account not found.")


def repay_loan():
    """Allow user to repay a loan."""
    pass


def check_loan_status():
    pass


def view_loan_history():
    account_name = input("Enter the account holder's name: ")

    if account_name in account_holders:
        index = account_holders.index(account_name)
        print(loan_history[index])
    else:
        print("‚ùå Account not found.")

def identify_card_type():
    """Identify type of credit card."""
    pass


def main():
    """Run the banking system."""
    while True:
        display_menu()
        try:
            choice = int(input("Enter your choice: "))
        except ValueError:
            print("‚ùå Invalid input! Please enter a valid number.")
            continue

        if choice == 1:
            create_account()
        elif choice == 2:
            deposit()
        elif choice == 3:
            withdraw()
        elif choice == 4:
            check_balance()
        elif choice == 5:
            list_accounts()
        elif choice == 6:
            transfer_funds()
        elif choice == 7:
            view_transaction_history()
        elif choice == 8:
            apply_for_loan()
        elif choice == 9:
            repay_loan()
        elif choice == 10:
            check_loan_status()
        elif choice == 11:
            view_loan_history()
        elif choice == 12:
            identify_card_type()
        elif choice == 0:
            print("Goodbye! üëã")
            break
        else:
            print("‚ùå Invalid choice. Try again!")

if __name__ == "__main__":
    main()
